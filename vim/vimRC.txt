set number
set relativenumber
syntax on
set tabstop=4
set shiftwidth=4
set expandtab
set noexpandtab
set autoindent
set smartindent
set clipboard=unnamed
set encoding=utf-8
set backspace=indent,eol,start
set guifont=:h15

command! DeleteFile call delete(expand('%')) | bdelete!

command! -nargs=1 NewFile execute ':e '.<q-args>

nmap <F2> :Explore<CR>

command! -nargs=1 SaveAs execute ':w '.<q-args>

set t_kD=^?

set noerrorbells
set novisualbell
set t_vb=

set guicursor=i:hor20

cd C:/Sublime

" Enable dark background
set background=dark

" Load the Catppuccin Macchiato color scheme
colorscheme catppuccin_macchiato

function! s:ChooseTemplate()
    " Only allow in C++ files
    if &filetype != 'cpp'
        echohl ErrorMsg
        echo 'This command is only available for C++ files'
        echohl None
        return
    endif

    let template_dir = expand('$USERPROFILE') . '/vim_cpp_templates'
    " Ensure directory exists
    if !isdirectory(template_dir)
        echohl ErrorMsg
        echo 'Template directory not found:' template_dir
        echohl None
        return
    endif

    " Get template files
    let templates = globpath(template_dir, '*.cpp', 0, 1)
    if empty(templates)
        echohl ErrorMsg
        echo 'No template files found in:' template_dir
        echohl None
        return
    endif

    " Create filename list for display
    let choices = map(copy(templates), 'fnamemodify(v:val, ":t")')
    call insert(choices, 'Choose a template:')
    
    " Show selection menu
    let choice = inputlist(choices)
    
    " Process selection
    if choice > 0 && choice <= len(templates)
        " Insert at beginning of file
        execute '0read ' . fnameescape(templates[choice - 1])
        " Move cursor to original position after insertion
        normal! G
    endif
endfunction

" Create command for easy access
command! Temp call s:ChooseTemplate()
nnoremap <F5> :w<CR>:cd %:p:h<CR>:!g++ -std=c++17 "%" -o "%:r.exe" && start cmd /c "%:r.exe & pause"<CR>
nnoremap i a

set showtabline=2

function! TabLabel(n)
  let label = bufname(tabpagebuflist(a:n)[tabpagewinnr(a:n) - 1])
  return '[' . a:n . '] ' . fnamemodify(label, ':t') . ' [X]'
endfunction

set tabline=%!MyTabLine()

function! MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    let tabnr = i + 1
    let s .= '%' . tabnr . 'T'
    if tabnr == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif
    let s .= ' %{TabLabel('.tabnr.')} '
  endfor
  return s . '%#TabLineFill#%T'
endfunction

" ───────────────────────────────────────────────────
" Force literal insert of any closing bracket
" (bypass Auto‑Pairs’ skip‑ahead behavior)
" ───────────────────────────────────────────────────
" For round, square, curly, and angle closers:
inoremap ) )
inoremap ] ]
inoremap } }
inoremap > >

" If you want the same on Shift+[ and Shift+{ explicitly (though
" the above covers them), you can also map the literal keys:
inoremap <S-[> [
inoremap <S-]> ]
inoremap <S-{> {
inoremap <S-}> }


if has("gui_running")
  set lines=999 columns=999
  au GUIEnter * simalt ~x
endif
